version : '3.8'
services:
  yyy-nacos:
    container_name: yyy-nacos
    image: nacos/nacos-server
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./nacos #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    environment:
      - MODE=standalone  #表示单机启动
    volumes:
      - ./nacos/logs/:/home/nacos/logs
      - ./nacos/conf/application.properties:/home/nacos/conf/application.properties
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    depends_on:
      - yyy-mysql
  yyy-mysql:
    container_name: yyy-mysql
    image: mysql:8.0
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./mysql #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/logs:/logs
      - ./mysql/data:/var/lib/mysql
    command: [
          'mysqld',
          '--innodb-buffer-pool-size=80M',
          '--character-set-server=utf8mb4',
          '--collation-server=utf8mb4_unicode_ci',
          '--default-time-zone=+8:00',
          '--lower-case-table-names=1'
        ]
    environment:
      MYSQL_DATABASE: 'yyy-cloud'
      MYSQL_ROOT_PASSWORD: 'root'
  yyy-redis:
    container_name: yyy-redis
    image: redis
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./redis  #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "6379:6379"
    volumes:
      - ./redis/conf/redis.conf:/home/yyy/redis/redis.conf
      - ./redis/data:/data
    command: redis-server /home/yyy/redis/redis.conf
  rabbitmq:
    image: rabbitmq:3.8.3-management
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./rabbitmq  #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    container_name: rabbitmq
    restart: always
    ports:
      - 15672:15672   # web UI 管理接口
      - 5672:5672    # 生产者和消费者连接使用的接口
    volumes:
      - ./rabbitmq/log:/var/log/rabbitmq #挂载 RabbitMQ日志
      - ./rabbitmq/data:/var/lib/rabbitmq #挂载 RabbitMQ数据
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
  yyy-nginx:
    container_name: yyy-nginx
    image: nginx
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./nginx #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "80:80"
    volumes:
      - ./nginx/html/dist:/home/yyy/projects/yyy-ui
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - yyy-gateway
    links:
      - yyy-gateway
  yyy-gateway:
    container_name: yyy-gateway
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/gateway #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - yyy-redis
    links:
      - yyy-redis
  yyy-auth:
    container_name: yyy-auth
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/auth #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9200:9200"
    depends_on:
      - yyy-redis
    links:
      - yyy-redis
  yyy-modules-system:
    container_name: yyy-modules-system
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/system #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9201:9201"
    depends_on:
      - yyy-redis
      - yyy-mysql
    links:
      - yyy-redis
      - yyy-mysql
  yyy-modules-gen:
    container_name: yyy-modules-gen
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/gen #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9202:9202"
    depends_on:
      - yyy-mysql
    links:
      - yyy-mysql
  yyy-modules-job:
    container_name: yyy-modules-job
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/job #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9203:9203"
    depends_on:
      - yyy-mysql
    links:
      - yyy-mysql
#  yyy-modules-file:
#    container_name: yyy-modules-file
#    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
#      context: ./yyy/modules/file #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
#      dockerfile: dockerfile
#    ports:
#      - "9300:9300"
#    volumes:
#    - ./yyy/uploadPath:/home/yyy/uploadPath
  yyy-visual-monitor:
    container_name: yyy-visual-monitor
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/visual/monitor #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9100:9100"
