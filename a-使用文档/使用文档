服务模块访问swagger
http://127.0.0.1:9201/swagger-ui/index.html

而直接通过模块去访问接口，不会经过网关拦截，则不需要认证也可以直接访问接口


如果启动了网关就可以这样访问
http://127.0.0.1:8080/swagger-ui/index.html
然后选择已经启动的模块，这时就可以看到接口

通过网关去访问接口时会根据是否有忽略放行的路径，否则都需要去认证token（此时想认证成功就得在启动auth模块）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

模块添加swagger功能
1、启动类加上注解 @EnableCustomSwagger2
2、pom文件加入依赖
            <!-- Swagger UI -->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${swagger.fox.version}</version>
            </dependency>
            <!-- yyy Common Swagger -->
            <dependency>
                <groupId>com.yyy</groupId>
                <artifactId>yyy-common-swagger</artifactId>
            </dependency>
3、yaml文件配置
    # swagger配置
    swagger:
      title: 权限模块接口文档
      license: Powered By yyy
      licenseUrl: https://yyy.vip

到这一步已经可以通过服务模块去访问swagger

4、如果想通过网关统一访问，需要注释网关配置的一些代码 SwaggerProvider
注释掉两行代码
    .filter(predicateDefinition -> "Path".equalsIgnoreCase(predicateDefinition.getName()))
    .filter(predicateDefinition -> !"yyy-auth".equalsIgnoreCase(routeDefinition.getId()))


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
注意调用登录接口时，启动auth模块是不够的，auth模块远程调用了system模块，所以还要启动system模块

登录用户名 admin
登录密码 admin123

如果不知道密码，可以全局搜索看  encryptPassword  这个方法，重新生成密码

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
调用接口如何携带token
第一种通过postMan访问接口

key值   Authorization
value值  xxxxxtokenxxxxx


第二种通过swagger - 网关模块
value值  xxxxxtokenxxxxx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何使用远程调用
首先启动调用的接口方的服务模块要启动和被调用方的服务模块要启动
一个有启动类的服务就建立一个yyy-api-xxx的模块，包名跟它的包名层级一致
其他服务想引用，直接引用yyy-api-xxx的依赖

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
上传文件时报错，不是因为超过了设置的文件大小，而是默认springboot的tomcat默认上传文件大小是1MB，需要设置
spring:
  servlet:
    multipart:
      max-file-size: 5MB

tomcat这边 优先触发
当设置为-1时，表示tomcat这边无限制，但是我们配置不能超过50MB的配置，超过时也会抛出异常
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
想要日志输入sql语句时，logback.xml文件的输出方式改为debug
        <!-- 系统模块日志级别控制  -->
    	<logger name="com.ruoyi" level="debug" />

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何使用分页
例如
    @RequiresPermissions("tool:gen:list")
    @GetMapping("/list")
    public TableDataInfo genList(GenTableVO GenTableVO)
    {
        startPage();
        List<GenTableVO> list = genTableService.selectGenTableList(GenTableVO);
        return getDataTable(list);
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
获取登录人信息的两种方式
TokenService
SecurityUtils
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
模块整合mybatis-plus
1、引入依赖
        <dependency>
            <groupId>com.yzz</groupId>
            <artifactId>yzz-common-datasource</artifactId>
        </dependency>
2、修改yaml文件，和扫描包路径
2.1、这一部分直接替换 datasource部分
datasource:
    druid:
      stat-view-servlet:
        enabled: true
        loginUsername: admin
        loginPassword: 123456
    dynamic:
      druid:
        initial-size: 5
        min-idle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxPoolPreparedStatementPerConnectionSize: 20
        filters: stat,slf4j
        connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      datasource:
          # 主库数据源
          master:
            driver-class-name: com.mysql.cj.jdbc.Driver
            url: jdbc:mysql://localhost:3306/yyy-cloud?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
            username: root
            password: lf18289339306
          # 从库数据源
          # slave:
            # username:
            # password:
            # url:
            # driver-class-name:

2.2、
原本 typeAliasesPackage: com.yyy.gen.domain
替换 typeAliasesPackage: com.yyy.gen

3、实体类、server类、mapper对象都添加mybatis-plus通用类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何使用定时器

在RyTask 创建定时方法
然后在数据库sys_job表添加定时器记录
当项目启动时，会查出所有记录，包括新添加的记录，此时重新初始化跑定时器，所以不用担心手动添加定时器，会不生效---这种方式一定要重启服务
（通过图形界面添加定时的原理也是如此，不过它添加定时器时，自动把它放到定时器里面跑，所以不重启也会生效）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
使用mybatis-plus自动填充功能时，如果出现空指针报错，多半是创建人没有从上下文中获取到就进行赋值导致报错，
必须统一通过网关访问，获取到了token并存到了上下文，在携带token访问接口时就可以获取到登录人的信息，进行自动填充

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
部署详情查看下面连接
https://blog.csdn.net/zht3306/article/details/124687425?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168602279916800227471915%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168602279916800227471915&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124687425-null-null.142^v88^control_2,239^v2^insert_chatgpt&utm_term=ruoyi%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2&spm=1018.2226.3001.4187

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何创建一个服务
拷贝system服务，然后改名字
注意：iml文件，他是关乎到启动类的，所以除了改名字，还要到 Edit Configuration 里面改一下路径，不然它还是指向原来system模块的启动路径
